set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")
cmake_minimum_required( VERSION 2.8 FATAL_ERROR )
project(cpp-class)

find_package(Doxygen)
if (DOXYGEN_FOUND)
    set(DOXY_CFG "doc/cpp-class.cfg")
    add_custom_target(doc ${DOXYGEN_EXECUTABLE} ${DOXY_CFG})
endif()

if("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
    set ( CMAKE_CXX_FLAGS_DEBUG "-O0 -g3 -pg -p -Wall ")
    set ( CMAKE_CXX_FLAGS_RELEASE  "-DNDEBUG " )
elseif("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU")
    set ( CMAKE_CXX_FLAGS_DEBUG "-O0 -g3 -pg -p -Wall  ")
elseif("${CMAKE_CXX_COMPILER_ID}" MATCHES "intel")
    set ( CMAKE_CXX_FLAGS_DEBUG "-C -g -O0  -debug all -traceback -Wall -I/usr/include/x86_64-linux-gnu")
    set ( CMAKE_CXX_FLAGS_RELEASE  "-warn -axP -ipo -O3 -no-prec-div -complex_limited_range -I/usr/include/x86_64-linux-gnu" )
endif()

IF(APPLE)
#   FIND_LIBRARY(ACCELERATE_LIBRARY Accelerate)
#   MARK_AS_ADVANCED (ACCELERATE_LIBRARY Accelerate)
#   SET(LIBS ${LIBS} ${ACCELERATE_LIBRARY})
   if("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU")
       set ( CMAKE_CXX_FLAGS_RELEASE "-O4 -march=core2 -flto " )
   endif()
ENDIF (APPLE)

IF("${CMAKE_SYSTEM}" MATCHES "Linux")
#   set(BLA_VENDOR "Intel10_64lp")
#   find_package(BLAS REQUIRED)
#   include_directories(${BLAS_INCLUDE_DIRS})
#   set(LIBS ${LIBS} ${BLAS_LIBRARIES} ) 
   if("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU")
       set ( CMAKE_CXX_FLAGS_RELEASE "-O3 -march=native -mmmx -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 -ftree-parallelize-loops=8 -funroll-loops  " )
   endif()
ENDIF ("${CMAKE_SYSTEM}" MATCHES "Linux")

if(CMAKE_BUILD_TYPE MATCHES "Release")
    set(NDEBUG 1)
endif(CMAKE_BUILD_TYPE MATCHES "Release")

SET(Boost_USE_MULTITHREADED "ON")
SET(Boost_ADDITIONAL_VERSIONS "0.99" "0.99.0" "1.78" "1.78.0" "1.41.0" "1.40.0" "1.42.0" "1.36.0" "1.45.0" "1.46.0" "1.46.1")

find_package(Boost COMPONENTS python)
if(Boost_FOUND)
    find_package(PythonLibs 2.6) 
    if(PYTHONLIBS_FOUND)
        find_package(PythonInterp)
        if(PYTHONINTERP_FOUND)
            find_package(Numpy)
            if(NUMPY_FOUND)
                include_directories(${PYTHON_INCLUDE_DIRS})
                include_directories(${NUMPY_INCLUDE_DIR})
                set(LIBS ${LIBS} ${PYTHON_LIBRARIES})
            endif(NUMPY_FOUND)
        endif(PYTHONINTERP_FOUND)
    endif(PYTHONLIBS_FOUND)
endif(Boost_FOUND)

find_package(GooglePerfTools)
if(GOOGLE_PERFTOOLS_FOUND)
    include_directories(${GOOGLE_PERFTOOLS_INCLUDE_DIR})
    set(LIBS ${LIBS} ${TCMALLOC_LIBRARIES} ${STACKTRACE_LIBRARIES} ${PROFILER_LIBRARIES})
endif(GOOGLE_PERFTOOLS_FOUND)

find_package(GFlags)
if(GFlags_FOUND)
    find_package(Glog)
    if(Glog_FOUND)
        include_directories(${GFlags_INCLUDE_DIRS})
        include_directories(${Glog_INCLUDE_DIRS})
        link_directories(${GFlags_LIBRARY_DIRS})
        set(LIBS ${LIBS} ${GFlags_LIBS})
        set(LIBS ${LIBS} ${Glog_LIBRARIES} -lglog)
    endif(Glog_FOUND)
endif(GFlags_FOUND)

add_subdirectory(src)
add_subdirectory(tests)
enable_testing()
