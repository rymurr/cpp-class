set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")
cmake_minimum_required( VERSION 2.8 FATAL_ERROR )
project(cpp-class)
SITE_NAME(host)


find_package(Doxygen)
if (DOXYGEN_FOUND)
    set(DOXY_CFG "doc/cpp-class.cfg")
    add_custom_target(doc ${DOXYGEN_EXECUTABLE} ${DOXY_CFG})
endif()

SET( CMAKE_EXE_LINKER_FLAGS_CLUSTER " $ENV{MPI_LIBS} -Wl,--warn-unresolved-symbols,--warn-once" CACHE STRING "Flags used for linking binaries during cluster builds." FORCE )
SET( CMAKE_EXE_LINKER_FLAGS_WORKSTATION " -Wl,--warn-unresolved-symbols,--warn-once" CACHE STRING "Flags used for linking binaries during workstation builds." FORCE )
SET( CMAKE_SHARED_LINKER_FLAGS_CLUSTER "$ENV{MPI_LIBS} -Wl,--warn-unresolved-symbols,--warn-once" CACHE STRING "Flags used by the shared libraries linker during cluster builds." FORCE)
SET( CMAKE_SHARED_LINKER_FLAGS_WORKSTATION  "-Wl,--warn-unresolved-symbols,--warn-once" CACHE STRING "Flags used by the shared libraries linker during workstation builds." FORCE)

if("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
    set ( CMAKE_CXX_FLAGS_DEBUG "-O0 -g3 -pg -p -Wall ")
    set ( CMAKE_CXX_FLAGS_RELEASE  " " )
    set ( CMAKE_CXX_FLAGS_CLUSTER " " CACHE STRING "Flags used for running on a cluster, specific to CX1 at IC" FORCE)
    set ( CMAKE_CXX_FLAGS_WORKSTATION " " CACHE STRING "Flags for running on a workstation, particularly mine ;-)" FORCE)  
elseif("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU")
    set ( CMAKE_CXX_FLAGS_DEBUG "-O0 -g3 -pg -p -Wall  ")
    set ( CMAKE_CXX_FLAGS_CLUSTER " " CACHE STRING "Flags used for running on a cluster, specific to CX1 at IC" FORCE)
    set ( CMAKE_CXX_FLAGS_WORKSTATION " " CACHE STRING "Flags for running on a workstation, particularly mine ;-)" FORCE)  
elseif("${CMAKE_CXX_COMPILER_ID}" MATCHES "intel")
    set ( CMAKE_CXX_FLAGS_DEBUG "-C -g -O0  -debug all -traceback -Wall -I/usr/include/x86_64-linux-gnu")
    set ( CMAKE_CXX_FLAGS_RELEASE  "-warn -axP -ipo -O3 -no-prec-div -complex_limited_range -I/usr/include/x86_64-linux-gnu" )
    set ( CMAKE_CXX_FLAGS_CLUSTER "-xSSE4.1 -warn -axP -ipo -O3 -no-prec-div -complex_limited_range -I/usr/include/x86_64-linux-gnu -I$ENV{MPI_INCLUDE} " CACHE STRING "Flags used for running on a cluster, specific to CX1 at IC" FORCE)
    set ( CMAKE_CXX_FLAGS_WORKSTATION "-xSSE4.1 -warn -axP -ipo -O3 -no-prec-div -complex_limited_range -I/usr/include/x86_64-linux-gnu " CACHE STRING "Flags for running on a workstation, particularly mine ;-)" FORCE)  
endif()

IF(APPLE)
#   FIND_LIBRARY(ACCELERATE_LIBRARY Accelerate)
#   MARK_AS_ADVANCED (ACCELERATE_LIBRARY Accelerate)
#   SET(LIBS ${LIBS} ${ACCELERATE_LIBRARY})
   if("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU")
       set ( CMAKE_CXX_FLAGS_RELEASE "-O4 -march=core2 -flto " )
   endif()
   if(CMAKE_BUILD_TYPE MATCHES "Release")
       set(NDEBUG 1)
   endif(CMAKE_BUILD_TYPE MATCHES "Release")
ENDIF (APPLE)

IF("${CMAKE_SYSTEM}" MATCHES "Linux")
#   set(BLA_VENDOR "Intel10_64lp")
#   find_package(BLAS REQUIRED)
#   include_directories(${BLAS_INCLUDE_DIRS})
#   set(LIBS ${LIBS} ${BLAS_LIBRARIES} ) 
   if("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU")
       set ( CMAKE_CXX_FLAGS_RELEASE "-O3 -ftree-parallelize-loops=8 -funroll-loops  " )
       set ( CMAKE_CXX_FLAGS_CLUSTER "-O3 -march=native -mmmx -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 -ftree-parallelize-loops=8 -funroll-loops  " CACHE STRING "Flags used for running on a cluster, specific to CX1 at IC" FORCE)
       set ( CMAKE_CXX_FLAGS_WORKSTATION " -I$ENV{MPI_INCLUDE} -O3 -march=native -mmmx -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 -ftree-parallelize-loops=8 -funroll-loops  " CACHE STRING "Flags for running on a workstation, particularly mine ;-)" FORCE)
   endif()
ENDIF ("${CMAKE_SYSTEM}" MATCHES "Linux")

MARK_AS_ADVANCED(
    CMAKE_CXX_FLAGS_CLUSTER
    CMAKE_C_FLAGS_CLUSTER
    CMAKE_EXE_LINKER_FLAGS_CLUSTER
    CMAKE_SHARED_LINKER_FLAGS_CLUSTER )
MARK_AS_ADVANCED(
    CMAKE_CXX_FLAGS_WORKSTATION
    CMAKE_C_FLAGS_WORKSTATION
    CMAKE_EXE_LINKER_FLAGS_WORKSTATION
    CMAKE_SHARED_LINKER_FLAGS_WORKSTATION)
SET( CMAKE_BUILD_TYPE "${CMAKE_BUILD_TYPE}" CACHE STRING "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel Cluster Workstation." FORCE)


if (NOT DEFINED Build_MPI)
    set(Build_MPI false)
endif(NOT DEFINED Build_MPI)

INCLUDE (CheckIncludeFiles)
if (${Build_MPI})
   find_package(Boost COMPONENTS mpi)
    if(Boost_FOUND)
        set(MPI_COMPILER "/usr/bin/mpic++")
        find_package(MPI)
        if(MPI_FOUND)
            include_directories(${MPI_INCLUDE_PATH})
            set(LIBS ${LIBS} ${MPI_LIBRARIES})
        endif(MPI_FOUND)
     endif(Boost_FOUND)
endif()

find_package(OpenMP)
if(OPENMP_FOUND)
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${OpenMP_CXX_FLAGS}")
    set(CMAKE_CXX_FLAGS_WORKSTATION "${CMAKE_CXX_FLAGS_RELEASE} ${OpenMP_CXX_FLAGS}")
    set(CMAKE_CXX_FLAGS_CLUSTER "${CMAKE_CXX_FLAGS_RELEASE} ${OpenMP_CXX_FLAGS}")
endif(OPENMP_FOUND)

SET(Boost_USE_MULTITHREADED "ON")
SET(Boost_ADDITIONAL_VERSIONS "1.45.0" "1.46.0" "1.46.1")

find_package(Boost COMPONENTS python)
if(Boost_FOUND)
    find_package(PythonLibs 2.6) 
    if(PYTHONLIBS_FOUND)
        find_package(PythonInterp)
        if(PYTHONINTERP_FOUND)
            find_package(Numpy)
            if(NUMPY_FOUND)
                include_directories(${PYTHON_INCLUDE_DIRS})
                include_directories(${NUMPY_INCLUDE_DIR})
                set(LIBS ${LIBS} ${PYTHON_LIBRARIES})
                message("${LIBS}")
            endif(NUMPY_FOUND)
        endif(PYTHONINTERP_FOUND)
    endif(PYTHONLIBS_FOUND)
endif(Boost_FOUND)

find_package(GooglePerfTools)
if(GOOGLE_PERFTOOLS_FOUND)
    include_directories(${GOOGLE_PERFTOOLS_INCLUDE_DIR})
    set(LIBS ${LIBS} ${TCMALLOC_LIBRARIES} ${STACKTRACE_LIBRARIES} ${PROFILER_LIBRARIES})
endif(GOOGLE_PERFTOOLS_FOUND)

find_package(GFlags)
if(GFlags_FOUND)
    find_package(Glog)
    if(Glog_FOUND)
        include_directories(${GFlags_INCLUDE_DIRS})
        include_directories(${Glog_INCLUDE_DIRS})
        link_directories(${GFlags_LIBRARY_DIRS})
        set(LIBS ${LIBS} ${GFlags_LIBS})
        set(LIBS ${LIBS} ${Glog_LIBRARIES} -lglog)
    endif(Glog_FOUND)
endif(GFlags_FOUND)

if(host MATCHES "[l][o][g][i][n][-].")
    set(PYTHONLIBS_FOUND false)
    set(MPI_FOUND true)
endif()


add_subdirectory(src)
add_subdirectory(tests)
enable_testing()
