include_directories (. ../src/)

if("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
    set ( CMAKE_CXX_FLAGS_DEBUG "-O0 -g3 -pg -p -Wall -arch i386")
    set ( CMAKE_CXX_FLAGS_RELEASE  "" )
elseif("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU")
    set ( CMAKE_CXX_FLAGS_DEBUG "-O0 -g3 -pg -p -Wall ")
    set ( CMAKE_CXX_FLAGS_RELEASE  "" )
elseif("${CMAKE_CXX_COMPILER_ID}" MATCHES "intel")
    set ( CMAKE_CXX_FLAGS_DEBUG "-C -g -O0  -debug all -traceback -Wall")
    set ( CMAKE_CXX_FLAGS_RELEASE  "-warn -axP -ipo -O3 -no-prec-div -complex_limited_range" )
#    set ( CMAKE_CXX_FLAGS_PARALLEL "-DPARALLEL -DBOOST_DISABLE_ASSERTS -axSSE4.2 -ipo -O3 -no-prec-div -complex_limited_range -openmp " )
endif()

find_package(GFlags)
if(GFlags_FOUND)
    find_package(Glog)
    if(Glog_FOUND)
        include_directories(${GFlags_INCLUDE_DIRS})
        include_directories(${Glog_INCLUDE_DIRS})
        link_directories(${GFlags_LIBRARY_DIRS})
        set(LIBS ${LIBS} ${GFlags_LIBS})
        set(LIBS ${LIBS} ${Glog_LIBRARIES} -lglog)
        add_definitions(-DGflags)
    endif(Glog_FOUND)
endif(GFlags_FOUND)

SET(Boost_USE_MULTITHREADED "OFF")
SET(Boost_ADDITIONAL_VERSIONS "0.99" "0.99.0" "1.78" "1.78.0" "1.41.0" "1.40.0" "1.42.0" "1.36.0" "1.45.0" "1.46.0" "1.46.1")

find_package(Boost COMPONENTS python)
if(Boost_FOUND)
    find_package(PythonLibs 2.6) 
    if(PYTHONLIBS_FOUND)
        include_directories(${PYTHON_INCLUDE_DIRS})
        set(LIBS ${LIBS} ${PYTHON_LIBRARIES})
        add_definitions(-DPYTHON)
    endif(PYTHONLIBS_FOUND)
endif(Boost_FOUND)


find_package(GooglePerfTools)
if(GOOGLE_PERFTOOLS_FOUND)
    include_directories(${GOOGLE_PERFTOOLS_INCLUDE_DIR})
    set(LIBS ${LIBS} ${TCMALLOC_LIBRARIES} ${STACKTRACE_LIBRARIES} ${PROFILER_LIBRARIES})
    add_definitions(-DGooglePerfTools)
endif(GOOGLE_PERFTOOLS_FOUND)

link_libraries(boost_unit_test_framework classical ${LIBS})
add_executable(params_tests ${COMMON} params_tests.cpp)
add_executable(field_tests ${COMMON} field_tests.cpp)
add_executable(icgen_tests ${COMMON} icgen_tests.cpp)
add_executable(timer_tests ${COMMON} timer_tests.cpp)
add_executable(coords_tests ${COMMON} coords_tests.cpp)
add_executable(zeros_tests ${COMMON} zeros_tests.cpp)
add_executable(integrator_tests ${COMMON} integrator_tests.cpp)
ENABLE_TESTING()
ADD_TEST(params_tests params_tests)
ADD_TEST(field_tests field_tests)
ADD_TEST(icgen_tests icgen_tests)
ADD_TEST(coords_tests coords_tests)
ADD_TEST(timer_tests timer_tests)
ADD_TEST(zeros_tests zeros_tests)
ADD_TEST(integrator_tests integrator_tests)
